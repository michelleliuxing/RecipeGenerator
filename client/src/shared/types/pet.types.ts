/**
 * Pet Type Definitions
 * 
 * This file contains all TypeScript interfaces and types related to pet management.
 * These types ensure type safety throughout the application and serve as contracts
 * between different parts of the system (frontend, backend, components).
 * 
 * Type Safety Benefits:
 * - Compile-time error checking
 * - Better IDE support with autocomplete
 * - Self-documenting code
 * - Easier refactoring and maintenance
 * - Consistent data structures across the app
 */

/**
 * Main Pet Interface
 * 
 * Represents a complete pet entity as stored in the database and used throughout the app.
 * This matches the backend Pet model structure.
 */
export interface Pet {
    id: string;                 // Unique identifier (UUID generated by backend)
    name: string;               // Pet's name (required)
    type: string;               // Pet type: "dog" or "cat" (required)
    breed: string;              // Pet's breed (required)
    age: number;                // Pet's age in years (required, can be decimal like 2.5)
    weight: number;             // Pet's weight in kilograms (required, can be decimal)
    activityLevel: string;      // Activity level: "low", "moderate", or "high" (required)
    healthIssues: string;       // Health issues description (defaults to "None")
    imageUrl: string;           // URL/path to pet's image (optional, defaults to empty string)
    isDesexed: boolean;         // Whether the pet is desexed/neutered (required)
    healthStatus?: 'healthy' | 'needs-attention'; // Optional computed health status for UI
}

/**
 * Pet Form Data Interface
 * 
 * Used for creating and updating pets. Similar to Pet interface but:
 * - Excludes the 'id' field (generated by backend)
 * - Makes some fields optional that have defaults
 * - Used in forms and API requests
 */
export interface PetFormData {
    name: string;               // Pet's name (required in forms)
    type: string;               // Pet type: "dog" or "cat" (required in forms)
    breed: string;              // Pet's breed (required in forms)
    age: number;                // Pet's age in years (required in forms)
    weight: number;             // Pet's weight in kilograms (required in forms)
    activityLevel: string;      // Activity level: "low", "moderate", or "high" (required in forms)
    healthIssues?: string;      // Health issues (optional, defaults to "None" on backend)
    imageUrl?: string;          // Image URL (optional, defaults to empty string)
    isDesexed: boolean;         // Desexed status (required in forms)
}

/**
 * Pet Card Component Props Interface
 * 
 * Defines the props that can be passed to a PetCard component.
 * Used for displaying individual pets in cards/lists with action buttons.
 */
export interface PetCardProps {
    pet: Pet;                           // The pet data to display (required)
    onEdit?: (pet: Pet) => void;        // Optional callback when edit button is clicked
    onDelete?: (petId: string) => void; // Optional callback when delete button is clicked
    onCreateRecipe?: (pet: Pet) => void; // Optional callback when create recipe button is clicked
}

/**
 * Pet List Component Props Interface
 * 
 * Defines the props for components that display lists of pets.
 * Includes loading and error states for better UX.
 */
export interface PetListProps {
    pets: Pet[];                // Array of pets to display (required)
    loading?: boolean;          // Optional loading state for showing spinners
    error?: string | null;      // Optional error message to display
}

// ==========================================
// RECIPE TYPES (Placeholder for future implementation)
// ==========================================

/**
 * Recipe Interface (Placeholder)
 * 
 * This is a placeholder type for future recipe functionality.
 * Will be expanded when recipe features are implemented.
 */
export interface Recipe {
    id: string;                 // Recipe unique identifier
    petId: string;              // Associated pet ID
    name: string;               // Recipe name
    ingredients: string[];      // List of ingredients
    instructions: string;       // Cooking instructions
    nutritionInfo?: object;     // Nutrition information (to be defined)
    createdAt: string;          // Creation timestamp
} 